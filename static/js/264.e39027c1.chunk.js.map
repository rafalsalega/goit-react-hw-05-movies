{"version":3,"file":"static/js/264.e39027c1.chunk.js","mappings":"sKAAO,IAAMA,EAAM,kC,kHC4GnB,UAvGkB,WAChB,OAAkCC,EAAAA,EAAAA,UAAS,IAA3C,eAAOC,EAAP,KAAkBC,EAAlB,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAAkCH,EAAAA,EAAAA,UAAS,CAAC,GAA5C,eAAOK,EAAP,KAAkBC,EAAlB,KACA,GAAkCN,EAAAA,EAAAA,WAAS,GAA3C,eAAOO,EAAP,KAAkBC,EAAlB,KACA,GAA4BR,EAAAA,EAAAA,WAAS,GAArC,eAAOS,EAAP,KAAeC,EAAf,MAEAC,EAAAA,EAAAA,YAAU,WACRH,GAAa,GACb,IAAMI,EAAc,mCAAG,+GAEIC,MAAM,sCAAD,OACYV,EADZ,oCAC+CJ,EAAAA,IAHxD,cAEbe,EAFa,gBAKAA,EAASC,OALT,OAKbC,EALa,OAMnBd,EAAac,EAAKC,QAAQC,IAC1BZ,EAAaU,EAAKC,SAClBT,GAAa,GARM,kDAUnBA,GAAa,GACbW,QAAQC,MAAM,4BAAd,MAXmB,0DAAH,qDAepBR,GACD,GAAE,CAACT,IAEJ,IAAMkB,EACJhB,GAAaiB,OAAOC,KAAKlB,GAAWmB,QAAO,SAAAC,GAAO,MAAgB,OAAZA,CAAJ,IAMpD,OACE,2BACGlB,IAAa,SAAC,IAAD,KACd,wBAAI,oBACFN,GAAkC,IAArBA,EAAUyB,QAAiBzB,EAAU0B,UAGlD,iCACE,uBAAG,mDACH,wBACG1B,EAAU0B,SAASC,KAAI,SAAAC,GAAQ,OAC9B,2BACE,gBACEC,IAAG,6CAAwCD,EAASE,WACpDC,IAAG,UAAKH,EAASI,cAAd,SACHC,OAAO,SAET,yBAAG,aAAWL,EAASI,mBANhBJ,EAASM,YADY,UALpC,uBAAG,qDAkBJd,EAAeK,OAAS,IACvB,iCACE,yBAAG,4CACyCL,EAAee,KAAK,UAEhE,mBAAQC,QAhCD,WACb3B,GAAU,SAAAD,GAAM,OAAKA,CAAL,GACjB,EA8BO,SAAyB,iBAG5BA,GAAUY,EAAeK,OAAS,IACjC,2BACqC,IAAlCJ,OAAOC,KAAKlB,GAAWqB,SACtB,uBAAG,2CAEJJ,OAAOC,KAAKlB,GAAWuB,KAAI,SAAAU,GAC1B,IAAMb,EAAUpB,EAAUiC,GAC1B,OAAKb,EAAQE,UAIX,4BACE,wBAAKW,IACJb,EAAQE,UACP,wBACGF,EAAQE,SAASC,KAAI,SAAAC,GAAQ,OAC5B,2BACE,gBACEC,IAAG,6CAAwCD,EAASE,WACpDC,IAAG,UAAKH,EAASI,cAAd,SACHC,OAAO,SAET,yBAAG,aAAWL,EAASI,mBANhBJ,EAASM,YADU,OAYhC,uBAAG,8CAhBGG,IAHH,yBAAIA,EAAY,sBAuB1B,SAKV,C,sBC1GD,SAASC,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQ7C,EAAK8C,GACpE,IACE,IAAIC,EAAON,EAAIzC,GAAK8C,GAChBE,EAAQD,EAAKC,KAInB,CAHE,MAAO3B,GAEP,YADAsB,EAAOtB,EAET,CAEI0B,EAAKE,KACPP,EAAQM,GAERE,QAAQR,QAAQM,GAAOG,KAAKP,EAAOC,EAEvC,CAEe,SAASO,EAAkBC,GACxC,OAAO,WACL,IAAIC,EAAOC,KACPC,EAAOC,UACX,OAAO,IAAIP,SAAQ,SAAUR,EAASC,GACpC,IAAIF,EAAMY,EAAGK,MAAMJ,EAAME,GAEzB,SAASZ,EAAMI,GACbR,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQ,OAAQG,EAClE,CAEA,SAASH,EAAOc,GACdnB,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQ,QAASc,EACnE,CAEAf,OAAMgB,EACR,GACF,CACF,C","sources":["asset/pass.js","components/Providers/Providers.jsx","../node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js"],"sourcesContent":["export const key = 'd2e7e2667c6f498e88b81d9628f5971c';","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { key } from '../../asset/pass';\nimport { Loader } from 'components/Loader/Loader';\n\nconst Providers = () => {\n  const [providers, setProviders] = useState([]);\n  const { movieId } = useParams();\n  const [countries, setCountries] = useState({});\n  const [isLoading, setIsLoading] = useState(false);\n  const [isOpen, setIsOpen] = useState(false);\n\n  useEffect(() => {\n    setIsLoading(true);\n    const fetchProviders = async () => {\n      try {\n        const response = await fetch(\n          `https://api.themoviedb.org/3/movie/${movieId}/watch/providers?api_key=${key}`\n        );\n        const data = await response.json();\n        setProviders(data.results.PL);\n        setCountries(data.results);\n        setIsLoading(false);\n      } catch (error) {\n        setIsLoading(false);\n        console.error('Error fetching providers:', error);\n      }\n    };\n\n    fetchProviders();\n  }, [movieId]);\n\n  const otherCountries =\n    countries && Object.keys(countries).filter(country => country !== 'PL');\n\n  const Switch = () => {\n    setIsOpen(isOpen => !isOpen);\n  };\n\n  return (\n    <div>\n      {isLoading && <Loader />}\n      <h2>Watch Providers</h2>\n      {!providers || providers.length === 0 || !providers.flatrate ? (\n        <p>No providers available for this movie in Poland.</p>\n      ) : (\n        <>\n          <p>Available providers for this movie in Poland:</p>\n          <ul>\n            {providers.flatrate.map(provider => (\n              <li key={provider.provider_id}>\n                <img\n                  src={`https://image.tmdb.org/t/p/original${provider.logo_path}`}\n                  alt={`${provider.provider_name} logo`}\n                  height=\"100\"\n                />\n                <p>Provider: {provider.provider_name}</p>\n              </li>\n            ))}\n          </ul>\n        </>\n      )}\n      {otherCountries.length > 0 && (\n        <>\n          <p>\n            Is available in the following countries: {otherCountries.join(', ')}\n          </p>\n          <button onClick={Switch}>Show more</button>\n        </>\n      )}\n      {isOpen && otherCountries.length > 0 && (\n        <div>\n          {Object.keys(countries).length === 0 && (\n            <p>No providers available for this movie.</p>\n          )}\n          {Object.keys(countries).map(countryCode => {\n            const country = countries[countryCode];\n            if (!country.flatrate) {\n              return <p>{countryCode} buy or rent only</p>;\n            }\n            return (\n              <div key={countryCode}>\n                <h3>{countryCode}</h3>\n                {country.flatrate ? (\n                  <ul>\n                    {country.flatrate.map(provider => (\n                      <li key={provider.provider_id}>\n                        <img\n                          src={`https://image.tmdb.org/t/p/original${provider.logo_path}`}\n                          alt={`${provider.provider_name} logo`}\n                          height=\"100\"\n                        />\n                        <p>Provider: {provider.provider_name}</p>\n                      </li>\n                    ))}\n                  </ul>\n                ) : (\n                  <p>No providers available in this country.</p>\n                )}\n              </div>\n            );\n          })}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Providers;","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}"],"names":["key","useState","providers","setProviders","movieId","useParams","countries","setCountries","isLoading","setIsLoading","isOpen","setIsOpen","useEffect","fetchProviders","fetch","response","json","data","results","PL","console","error","otherCountries","Object","keys","filter","country","length","flatrate","map","provider","src","logo_path","alt","provider_name","height","provider_id","join","onClick","countryCode","asyncGeneratorStep","gen","resolve","reject","_next","_throw","arg","info","value","done","Promise","then","_asyncToGenerator","fn","self","this","args","arguments","apply","err","undefined"],"sourceRoot":""}