{"version":3,"file":"static/js/186.81aa2de7.chunk.js","mappings":"sKAAO,IAAMA,EAAM,kC,kHCmDnB,UA9CgB,WACd,OAA8BC,EAAAA,EAAAA,UAAS,IAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACA,GAA0BF,EAAAA,EAAAA,UAAS,MAAnC,eAAOG,EAAP,KAAcC,EAAd,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAAkCL,EAAAA,EAAAA,WAAS,GAA3C,eAAOO,EAAP,KAAkBC,EAAlB,KAqBA,OAnBAC,EAAAA,EAAAA,YAAU,WACRD,GAAa,GACb,IAAME,EAAY,mCAAG,+GAEMC,MAAM,sCAAD,OACYN,EADZ,4BACuCN,EAAAA,EADvC,oBAFX,cAEXa,EAFW,gBAKEA,EAASC,OALX,OAKXC,EALW,OAMjBZ,EAAWY,EAAKC,SAChBP,GAAa,GAPI,kDASjBJ,EAAS,2BACTI,GAAa,GAVI,0DAAH,qDAclBE,GACD,GAAE,CAACL,KAGF,4BACE,wBAAI,YACHE,IAAa,SAAC,IAAD,IACbJ,IAAS,uBAAIA,IACM,IAAnBF,EAAQe,QACP,uBAAG,+CAEH,wBACGf,EAAQgB,KAAI,SAAAC,GAAM,OACjB,2BACE,0BAAI,WAASA,EAAOC,WACpB,uBAAID,EAAOE,YAFJF,EAAOG,GADC,QAU5B,C,sBCjDD,SAASC,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQ5B,EAAK6B,GACpE,IACE,IAAIC,EAAON,EAAIxB,GAAK6B,GAChBE,EAAQD,EAAKC,KAInB,CAHE,MAAO3B,GAEP,YADAsB,EAAOtB,EAET,CAEI0B,EAAKE,KACPP,EAAQM,GAERE,QAAQR,QAAQM,GAAOG,KAAKP,EAAOC,EAEvC,CAEe,SAASO,EAAkBC,GACxC,OAAO,WACL,IAAIC,EAAOC,KACPC,EAAOC,UACX,OAAO,IAAIP,SAAQ,SAAUR,EAASC,GACpC,IAAIF,EAAMY,EAAGK,MAAMJ,EAAME,GAEzB,SAASZ,EAAMI,GACbR,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQ,OAAQG,EAClE,CAEA,SAASH,EAAOc,GACdnB,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQ,QAASc,EACnE,CAEAf,OAAMgB,EACR,GACF,CACF,C","sources":["asset/pass.js","components/Reviews/Reviews.jsx","../node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js"],"sourcesContent":["export const key = 'd2e7e2667c6f498e88b81d9628f5971c';","import React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { key } from '../../asset/pass';\nimport { Loader } from 'components/Loader/Loader'; \n\nconst Reviews = () => {\n  const [reviews, setReviews] = useState([]);\n  const [error, setError] = useState(null);\n  const { movieId } = useParams();\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    setIsLoading(true);\n    const fetchReviews = async () => {\n      try {\n        const response = await fetch(\n          `https://api.themoviedb.org/3/movie/${movieId}/reviews?api_key=${key}&language=en-US`\n        );\n        const data = await response.json();\n        setReviews(data.results);\n        setIsLoading(false);\n      } catch (error) {\n        setError('Failed to fetch reviews');\n        setIsLoading(false);\n      }\n    };\n\n    fetchReviews();\n  }, [movieId]);\n\n  return (\n    <div>\n      <h2>Reviews</h2>\n      {isLoading && <Loader />}\n      {error && <p>{error}</p>}\n      {reviews.length === 0 ? (\n        <p>We don't have any reviews for this movie.</p>\n      ) : (\n        <ul>\n          {reviews.map(review => (\n            <li key={review.id}>\n              <h3>Author: {review.author}</h3>\n              <p>{review.content}</p>\n            </li>\n          ))}\n        </ul>\n      )}\n    </div>\n  );\n};\n\nexport default Reviews;","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}"],"names":["key","useState","reviews","setReviews","error","setError","movieId","useParams","isLoading","setIsLoading","useEffect","fetchReviews","fetch","response","json","data","results","length","map","review","author","content","id","asyncGeneratorStep","gen","resolve","reject","_next","_throw","arg","info","value","done","Promise","then","_asyncToGenerator","fn","self","this","args","arguments","apply","err","undefined"],"sourceRoot":""}