{"version":3,"file":"static/js/247.8dad07ad.chunk.js","mappings":"sKAAO,IAAMA,EAAM,kC,kHC4DnB,UAvDa,WACX,OAAwBC,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAAwCF,EAAAA,EAAAA,UAAS,IAAjD,eAAOG,EAAP,KAAqBC,EAArB,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QACP,GAAkCL,EAAAA,EAAAA,WAAS,GAA3C,eAAOO,EAAP,KAAkBC,EAAlB,KAqBD,OAnBAC,EAAAA,EAAAA,YAAU,WACRD,GAAa,GACb,IAAME,EAAS,mCAAG,+GAESC,MAAM,sCAAD,OACYN,EADZ,4BACuCN,EAAAA,EADvC,oBAFd,cAERa,EAFQ,gBAKKA,EAASC,OALd,OAKRC,EALQ,OAMdZ,EAAQY,EAAKb,MACbO,GAAa,GAPC,kDASdJ,EAAgB,wBAChBI,GAAa,GAVC,0DAAH,qDAcfE,GACD,GAAE,CAACL,KAGF,4BACE,wBAAI,SACHE,IAAa,SAAC,IAAD,IACbJ,IAAgB,uBAAIA,IACJ,IAAhBF,EAAKc,QACJ,uBAAG,oDAEHd,EAAKe,KAAI,SAAAC,GAAK,OACZ,4BACE,gBACEC,IACED,EAAME,aAAN,yCACsCF,EAAME,cACxC,oDAENC,IAAG,UAAKH,EAAMI,KAAX,YACHC,MAAM,SAER,yBACGL,EAAMI,KAAOJ,EAAMI,KAAO,GAAG,MAAI,IACjCJ,EAAMM,UAAYN,EAAMM,UAAY,eAZ/BN,EAAMO,GADJ,MAoBrB,C,sBC1DD,SAASC,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQ/B,EAAKgC,GACpE,IACE,IAAIC,EAAON,EAAI3B,GAAKgC,GAChBE,EAAQD,EAAKC,KAInB,CAHE,MAAOC,GAEP,YADAN,EAAOM,EAET,CAEIF,EAAKG,KACPR,EAAQM,GAERG,QAAQT,QAAQM,GAAOI,KAAKR,EAAOC,EAEvC,CAEe,SAASQ,EAAkBC,GACxC,OAAO,WACL,IAAIC,EAAOC,KACPC,EAAOC,UACX,OAAO,IAAIP,SAAQ,SAAUT,EAASC,GACpC,IAAIF,EAAMa,EAAGK,MAAMJ,EAAME,GAEzB,SAASb,EAAMI,GACbR,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQ,OAAQG,EAClE,CAEA,SAASH,EAAOe,GACdpB,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQ,QAASe,EACnE,CAEAhB,OAAMiB,EACR,GACF,CACF,C","sources":["asset/pass.js","components/Cast/Cast.jsx","../node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js"],"sourcesContent":["export const key = 'd2e7e2667c6f498e88b81d9628f5971c';","import React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { key } from '../../asset/pass';\nimport { Loader } from 'components/Loader/Loader'; \n\nconst Cast = () => {\n  const [cast, setCast] = useState([]);\n  const [errorMessage, setErrorMessage] = useState('');\n  const { movieId } = useParams();\n   const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    setIsLoading(true);\n    const fetchCast = async () => {\n      try {\n        const response = await fetch(\n          `https://api.themoviedb.org/3/movie/${movieId}/credits?api_key=${key}&language=en-US`\n        );\n        const data = await response.json();\n        setCast(data.cast);\n        setIsLoading(false);\n      } catch (error) {\n        setErrorMessage('Failed to fetch cast');\n        setIsLoading(false);\n      }\n    };\n\n    fetchCast();\n  }, [movieId]);\n\n  return (\n    <div>\n      <h2>Cast</h2>\n      {isLoading && <Loader />}\n      {errorMessage && <p>{errorMessage}</p>}\n      {cast.length === 0 ? (\n        <p>We don't have cast informations for this movie.</p>\n      ) : (\n        cast.map(actor => (\n          <div key={actor.id}>\n            <img\n              src={\n                actor.profile_path\n                  ? `https://image.tmdb.org/t/p/w200${actor.profile_path}`\n                  : 'https://poster.keepcalmandposters.com/3253015.jpg'\n              }\n              alt={`${actor.name} profile`}\n              width=\"200\"\n            />\n            <p>\n              {actor.name ? actor.name : ''} as{' '}\n              {actor.character ? actor.character : 'unknown'}\n            </p>\n          </div>\n        ))\n      )}\n    </div>\n  );\n};\n\nexport default Cast;","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}"],"names":["key","useState","cast","setCast","errorMessage","setErrorMessage","movieId","useParams","isLoading","setIsLoading","useEffect","fetchCast","fetch","response","json","data","length","map","actor","src","profile_path","alt","name","width","character","id","asyncGeneratorStep","gen","resolve","reject","_next","_throw","arg","info","value","error","done","Promise","then","_asyncToGenerator","fn","self","this","args","arguments","apply","err","undefined"],"sourceRoot":""}